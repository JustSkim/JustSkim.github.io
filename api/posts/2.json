{"total":15,"pageSize":10,"pageCount":2,"data":[{"title":"Pyqt5中的常用模块与组件","slug":"应用窗口初始化","date":"2021-08-29T14:29:42.426Z","updated":"2021-08-30T20:48:02.559Z","comments":true,"path":"api/articles/应用窗口初始化.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"应用窗口初始化\"><a href=\"#应用窗口初始化\" class=\"headerlink\" title=\"应用窗口初始化\"></a>应用窗口初始化</h1><h2 id=\"QApplication与QWidget\"><a href=\"#QApplication与QWidget\" class=\"headerlink\" title=\"QApplication与QWidget\"></a>QApplication与QWidget</h2><p>QWidget控件是一个用户界面的基本控件，它提供了基本的应用构造器。默认情况下，构造器是没有父级的，没有父级的构造器被称为窗口（window）。</p>\n<p>窗口类型简介<a href=\"%5BQWidget,QMainWindow%E5%92%8CQDialog%E7%9A%84%E5%8C%BA%E5%88%AB%5D(https://blog.csdn.net/ikahn/article/details/6706284)\">^1</a><br>QMainWindow、QWidget、QDialog用于创建窗口，可以直接使用，也可以派生使用，这3个基类从名字上看分别是 “微件”、”对话框”、”主窗口。<br>QMainWindow窗口包含菜单栏、工具栏、状态栏、标题栏等，是最常见的窗口形式。<br>QDialog是对话框窗口的基类，主要用于执行短期任务，或与用户进行交互，可以是模态或非模态的。QDialog对话框没有菜单栏、工具栏、状态栏等。<br>QWidget是Qt图形组件的基类，可以作为顶层窗口，也可以嵌入到其它组件中。</p>\n<p>在创建Qt Gui Application时，总会让你选择在QWidget,QMainWindow和QDialog中选择一个Base Class。</p>\n<p>这三个类具体有什么区别呢？在Qt的手册和网上找了一些资料。</p>\n<p>先看官方的手册中的介绍：</p>\n<blockquote>\n<p>QWidget Class Reference<br>The QWidget class is the base class of all user interface objects.<br>Inherits: QObject and QPaintDevice.<br>Inherited by: ……, QDialog, ……,QMainWindow, ……</p>\n</blockquote>\n<blockquote>\n<p>QDialog Class Reference<br>The QDialog class is the base class of dialog windows.<br>Inherits: QWidget.</p>\n</blockquote>\n<blockquote>\n<p>QMainWindow Class Reference<br>The QMainWindow class provides a main application window.<br>Inherits: QWidget.</p>\n</blockquote>\n<p>可以看到QMainWindow和QDialog都是继承自QWidget。再看看下面那段从网上转过来的介绍，大概就能了解三者之间的区别了。</p>\n<p>QWidget类是所有用户界面对象的基类。 窗口部件是用户界面的一个原子：它从窗口系统接收鼠标、键盘和其它事件，并且在屏幕上绘制自己的表现。每一个窗口部件都是矩形，并且它们按Z轴顺序排列的。一个窗口部件可以被它的父窗口部件或者它前面的窗口部件盖住一部分。</p>\n<p>QMainWindow 类提供一个有菜单条、锚接窗口（例如工具条）和一个状态条的主应用程序窗口。主窗口通常用在提供一个大的中央窗口部件（例如文本编辑或者绘制画布）以及周围菜单、工具条和一个状态条。QMainWindow常常被继承，因为这使得封装中央部件、菜单和工具条以及窗口状态变得更容易。继承使创建当用户点击菜单项或者工具条按钮时被调用的槽成为可能。你也可以使用Qt设计器来创建主窗口。</p>\n<p>QDialog类是对话框窗口的基类。对话框窗口是主要用于短期任务以及和用户进行简要通讯的顶级窗口。QDialog可以是模式的也可以是非模式的。QDialog支持扩展性并且可以提供返回值。它们可以有默认按钮。QDialog也可以有一个QSizeGrip在它的右下角，使用setSizeGripEnabled()。</p>\n<p>QDialog 是最普通的顶级窗口。不被嵌入到一个父窗口部件的窗口部件被叫做顶级窗口部件。通常情况下，顶级窗口部件是有框架和标题栏的窗口（尽管如果使用了一定的窗口部件标记，创建顶级窗口部件时也可能没有这些装饰。）在Qt中，QMainWindow和和不同的QDialog的子类是最普通的顶级窗口。</p>\n<p>综上，如果是顶级对话框，那就基于QDialog创建，如果是主窗体，那就基于QMainWindow，如果不确定，或者有可能作为顶级窗体，或有可能嵌入到其他窗体中，则基于QWidget创建。当然了，实际中，你还可以基于任何其他部件类来派生。看实际需求了，比如QFrame、QStackedWidget等等。</p>\n<p>根据官方对QApplication的解释：<br>PyQt5.QtGui .QGuiApplication<br>继承自QCoreApplication，由PyQt5.QtWidgets .QApplication继承。<br>QApplication管理GUI程序的控制流和主要设置。<br>QApplication包含窗口系统和其他来源处理过和发送过的主事件循环。它也处理应用程序的初始化和收尾工作，并提供对话管理。<br>QApplication可以对系统和应用的大部分设置项进行设置。<br>对于用Qt写的任何一个GUI应用，不管这个应用有没有窗口或多少个窗口，有且只有一QApplication对象。<br>sys.argv是一组命令行参数的列表。Python可以在shell里运行，这个参数提供对脚本控制的功能<br>每一个PyQt5项目都需要创建一个 QApplication 对象。 sys.argv 则提供了命令行的一些参数，这样 Python 脚本就能从 Shell 运行，这是我们控制脚本开始运行的方式。</p>\n<p>至于为什么需要sys.argv，可以看<a href=\"https://stackoverflow.com/questions/27940378/why-do-i-need-sys-argv-to-start-a-qapplication-in-pyqt\">stackoverflow上的这一个回答</a>：<br>This calls the constructor of the C++ class QApplication.<br>It uses sys.argv (argc and argv in C++) to initialize the QT application.<br>There are a bunch of arguments that you can pass to QT, like styles, debugging stuff and so on.<br>以及官方文档：<a href=\"https://doc.qt.io/qt-5/qapplication.html#QApplication\">https://doc.qt.io/qt-5/qapplication.html#QApplication</a></p>\n<h2 id=\"Hello-World实例\"><a href=\"#Hello-World实例\" class=\"headerlink\" title=\"Hello World实例\"></a>Hello World实例</h2><p>以下是一个来自<a href=\"www.zetcode.com\">技术网站zetcode</a>的实例代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt5 tutorial </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">In this example, we create a simple</span></span><br><span class=\"line\"><span class=\"string\">window in PyQt5.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">website: zetcode.com </span></span><br><span class=\"line\"><span class=\"string\">Last edited: August 2017</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt5.QtWidgets <span class=\"keyword\">import</span> QApplication, QWidget</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\"></span><br><span class=\"line\">    w = QWidget()</span><br><span class=\"line\">    w.resize(<span class=\"number\">250</span>, <span class=\"number\">150</span>)</span><br><span class=\"line\">    w.move(<span class=\"number\">300</span>, <span class=\"number\">300</span>)</span><br><span class=\"line\">    w.setWindowTitle(<span class=\"string\">&#x27;Simple&#x27;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    w.show()</span><br><span class=\"line\">    <span class=\"comment\">#QWidget类中的show()方法能让窗口在桌面上显示出来。注意窗口是在内存里创建，之后才能在显示器里显示出来</span></span><br><span class=\"line\"></span><br><span class=\"line\">    sys.exit(app.exec_())</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    调用exit()方法或直接销毁窗口时，主循环就会结束。sys.exit()方法能确保主循环安全退出。外部环境会收到窗口如何结束的信息。</span></span><br><span class=\"line\"><span class=\"string\">    这里的方法exec_()之所以有个下划线，是因为exec是一个Python的关键字。</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"几个名词之间的区分\"><a href=\"#几个名词之间的区分\" class=\"headerlink\" title=\"几个名词之间的区分\"></a>几个名词之间的区分</h2><p>根据<a href=\"https://www.zetcode.com/gui/pyqt5/firstprograms/\">技术网站zetcode<a href=\"%5B%E6%8A%80%E6%9C%AF%E7%BD%91%E7%AB%99zetcode%5D(www.zetcode.com)\">^2</a>提供的相关英文文档</a>，内容如下：</p>\n<blockquote>\n<p>Here we provide the necessary imports. The basic widgets are located in <code>PyQt5.QtWidgets</code> module.</p>\n</blockquote>\n<blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app = QApplication(sys.argv) ```</span><br><span class=\"line\"></span><br><span class=\"line\">Every PyQt5 application must create an application object. The `sys.argv` parameter is a list of arguments from a command line. Python scripts can be run from the shell. It is a way how we can control the startup of our scripts.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>w = QWidget()```</p>\n</blockquote>\n<blockquote>\n<p>The <code>QWidget</code> widget is the base class of all user interface objects in PyQt5. We provide the default constructor for <code>QWidget</code>. The default constructor has no parent. A widget with no parent is called a window.</p>\n</blockquote>\n<h2 id=\"带图标的窗口\"><a href=\"#带图标的窗口\" class=\"headerlink\" title=\"带图标的窗口\"></a>带图标的窗口</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">例2  带图标的窗口</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt5 tutorial </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This example shows an icon</span></span><br><span class=\"line\"><span class=\"string\">in the titlebar of the window.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com </span></span><br><span class=\"line\"><span class=\"string\">Last edited: August 2017</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt5.QtWidgets <span class=\"keyword\">import</span> QApplication, QWidget</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt5.QtGui <span class=\"keyword\">import</span> QIcon</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Example</span>(<span class=\"params\">QWidget</span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\">        <span class=\"comment\">#使用initUI()方法创建一个GUI(图形用户界面 Graphical User Interface)。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initUI</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">220</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;Icon&#x27;</span>)</span><br><span class=\"line\">        self.setWindowIcon(QIcon(<span class=\"string\">&#x27;icon.png&#x27;</span>))   </span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        三个方法都继承自QWidget类。</span></span><br><span class=\"line\"><span class=\"string\">        setGeometry()有两个作用：</span></span><br><span class=\"line\"><span class=\"string\">        把窗口放到屏幕上并且设置窗口大小。参数分别代表屏幕坐标的x、y和窗口大小的宽、高。</span></span><br><span class=\"line\"><span class=\"string\">        也就是说这个方法是resize()和move()的合体。</span></span><br><span class=\"line\"><span class=\"string\">        setWindowTitle(&#x27;Icon&#x27;)为窗口添加了一个在标题栏展示文字&#x27;Icon&#x27;的标题</span></span><br><span class=\"line\"><span class=\"string\">        最后一个方法是添加了图标。先创建一个QIcon对象，然后接受一个路径作为参数显示图标。</span></span><br><span class=\"line\"><span class=\"string\">        &#x27;&#x27;&#x27;</span>     </span><br><span class=\"line\"></span><br><span class=\"line\">        self.show()</span><br><span class=\"line\">        <span class=\"comment\">#让控件在桌面上显示出来。控件在内存里创建，之后才能在显示器上显示出来。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    MyApplication = QApplication(sys.argv) <span class=\"comment\">#创建应用对象，名称无所谓，后续操作相同即可</span></span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(MyApplication.exec_())         <span class=\"comment\">#销毁主控件</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"提示框\"><a href=\"#提示框\" class=\"headerlink\" title=\"提示框\"></a>提示框</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"string\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 例3 提示框</span></span><br><span class=\"line\">ZetCode PyQt5 tutorial </span><br><span class=\"line\"></span><br><span class=\"line\">This example shows a tooltip on </span><br><span class=\"line\">a window <span class=\"keyword\">and</span> a button.</span><br><span class=\"line\"></span><br><span class=\"line\">Author: Jan Bodnar</span><br><span class=\"line\">Website: zetcode.com </span><br><span class=\"line\">Last edited: August <span class=\"number\">2017</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">import sys</span></span><br><span class=\"line\"><span class=\"string\">from PyQt5.QtWidgets import (QWidget, QToolTip, </span></span><br><span class=\"line\"><span class=\"string\">    QPushButton, QApplication)</span></span><br><span class=\"line\"><span class=\"string\">    #引用相关模块</span></span><br><span class=\"line\"><span class=\"string\">from PyQt5.QtGui import QFont    </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">class Example(QWidget):</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    def __init__(self):</span></span><br><span class=\"line\"><span class=\"string\">        super().__init__()</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        self.initUI()</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    def initUI(self):</span></span><br><span class=\"line\"><span class=\"string\">        #为应用创建了一个提示框，10px的SansSerif字体</span></span><br><span class=\"line\"><span class=\"string\">        QToolTip.setFont(QFont(&#x27;SansSerif&#x27;, 10))</span></span><br><span class=\"line\"><span class=\"string\">        #QToolTip.setFont(QFont(&#x27;SansSerif&#x27;, 10,QFont.Bold,italic=True))</span></span><br><span class=\"line\"><span class=\"string\">        #函数QFont具体使用见 https://doc.qt.io/qtforpython/PySide6/QtGui/QFont.html</span></span><br><span class=\"line\"><span class=\"string\">        #参数：字体类型，大小（px），粗细，斜体...</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        btn = QPushButton(text=&#x27;Button&#x27;,parent=self)</span></span><br><span class=\"line\"><span class=\"string\">        &#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        创建一个继承自QPushButton的按钮。第一个参数text参数是想要显示的按钮名称，</span></span><br><span class=\"line\"><span class=\"string\">        第二个参数parent是按钮的父级组件，这个例子中，self所指的父级组件，就是我们创建的继承自Qwidget的Example类。</span></span><br><span class=\"line\"><span class=\"string\">        应用中的组件都是一层一层（继承而来的？）的，在这个层里，大部分的组件都有自己的父级，</span></span><br><span class=\"line\"><span class=\"string\">        没有父级的组件（parent=None,没有parent的QWidget类），是顶级的窗口，即被认为是最上层的窗体（通常是MainWindow）。</span></span><br><span class=\"line\"><span class=\"string\">        &#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        #创建一个按钮，当鼠标悬浮于按钮时，提示&#x27;This is a QPushButton widget&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        btn.setToolTip(&#x27;This is a &lt;b&gt;QPushButton&lt;/b&gt; widget&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">        #调用setTooltip()创建提示框可以使用富文本格式的内容</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        #当鼠标悬浮于窗口中时，提示&#x27;This is a QWidget widget&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        self.setToolTip(&#x27;This is a &lt;b&gt;QWidget&lt;/b&gt; widget&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">        </span></span><br><span class=\"line\"><span class=\"string\">        btn.resize(btn.sizeHint())#sizeHint()会自动给定一个合适的尺寸</span></span><br><span class=\"line\"><span class=\"string\">        btn.move(50, 50)       </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        self.setGeometry(300, 300, 300, 200)</span></span><br><span class=\"line\"><span class=\"string\">        #setGeometry()把窗口放到屏幕上并且设置窗口大小，4个参数分别代表屏幕坐标的x、y和窗口大小的宽、高。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        self.setWindowTitle(&#x27;Tooltips&#x27;)    #设置标题</span></span><br><span class=\"line\"><span class=\"string\">        self.show()</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">if __name__ == &#x27;__main__&#x27;:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    app = QApplication(sys.argv)</span></span><br><span class=\"line\"><span class=\"string\">    ex = Example()</span></span><br><span class=\"line\"><span class=\"string\">    sys.exit(app.exec_())</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"关闭窗口\"><a href=\"#关闭窗口\" class=\"headerlink\" title=\"关闭窗口\"></a>关闭窗口</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">例4：关闭窗口</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt5 tutorial </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This program creates a quit</span></span><br><span class=\"line\"><span class=\"string\">button. When we press the button,</span></span><br><span class=\"line\"><span class=\"string\">the application terminates. </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com </span></span><br><span class=\"line\"><span class=\"string\">Last edited: August 2017</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt5.QtWidgets <span class=\"keyword\">import</span> QWidget, QPushButton, QApplication</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt5.QtCore <span class=\"keyword\">import</span> QCoreApplication</span><br><span class=\"line\"><span class=\"comment\">#程序需要QtCore对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Example</span>(<span class=\"params\">QWidget</span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initUI</span>(<span class=\"params\">self</span>):</span>               </span><br><span class=\"line\"></span><br><span class=\"line\">        qbtn = QPushButton(text=<span class=\"string\">&#x27;Quit&#x27;</span>, parent=self)</span><br><span class=\"line\">        <span class=\"comment\">#创建一个继承自QPushButton的按钮。第一个参数text参数是想要显示的按钮名称，第二个参数parent是按钮的父级组件</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">#创建了一个点击之后就退出窗口的按钮。</span></span><br><span class=\"line\">        qbtn.clicked.connect(QCoreApplication.instance().quit)</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        事件传递系统在PyQt5内建的single（信号）和slot（槽）机制里面。</span></span><br><span class=\"line\"><span class=\"string\">        点击按钮之后，信号会被捕捉并给出既定的反应。</span></span><br><span class=\"line\"><span class=\"string\">        QCoreApplication包含了事件的主循环，它能添加和删除所有的事件，instance()创建了一个它的实例。</span></span><br><span class=\"line\"><span class=\"string\">        QCoreApplication是在QApplication里创建的。 点击事件和能终止进程并退出应用的quit函数绑定在了一起。</span></span><br><span class=\"line\"><span class=\"string\">        在发送者和接受者之间建立了通讯，发送者就是按钮，接受者就是应用对象。</span></span><br><span class=\"line\"><span class=\"string\">        QpushButton常用的三种响应有pressed，released和clicked</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        在Qt中，控件中的clicked（）信号和clicked（bool）信号是两个不同的信号，区别在于：</span></span><br><span class=\"line\"><span class=\"string\">        映射槽函数时，clicked（）信号映射到的槽函数是不带参的，clicked（bool）信号映射到的槽函数是带参数的。</span></span><br><span class=\"line\"><span class=\"string\">        &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        qbtn.resize(qbtn.sizeHint())</span><br><span class=\"line\">        qbtn.move(<span class=\"number\">50</span>, <span class=\"number\">50</span>)       </span><br><span class=\"line\"></span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">250</span>, <span class=\"number\">150</span>)</span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;Quit button&#x27;</span>)    </span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"消息盒子\"><a href=\"#消息盒子\" class=\"headerlink\" title=\"消息盒子\"></a>消息盒子</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">例5  消息盒子</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt5 tutorial </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This program shows a confirmation </span></span><br><span class=\"line\"><span class=\"string\">message box when we click on the close</span></span><br><span class=\"line\"><span class=\"string\">button of the application window. </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com </span></span><br><span class=\"line\"><span class=\"string\">Last edited: August 2017</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt5.QtWidgets <span class=\"keyword\">import</span> QWidget, QMessageBox, QApplication</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Example</span>(<span class=\"params\">QWidget</span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initUI</span>(<span class=\"params\">self</span>):</span>               </span><br><span class=\"line\"></span><br><span class=\"line\">        self.setGeometry(<span class=\"number\">300</span>, <span class=\"number\">300</span>, <span class=\"number\">250</span>, <span class=\"number\">150</span>)        </span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;Message box&#x27;</span>)    </span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    QWidget在程序窗口关闭时会触发 closeEvent() 事件</span></span><br><span class=\"line\"><span class=\"string\">    因此我们这里药重写窗口方法closeEvent,添加关闭窗口触发的事件</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">closeEvent</span>(<span class=\"params\">self, event</span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">        reply = QMessageBox.question(self, <span class=\"string\">&#x27;Message&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;Are you sure to quit?&quot;</span>, QMessageBox.Yes | </span><br><span class=\"line\">            QMessageBox.No, QMessageBox.No)</span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        创建了一个消息框，上面有俩按钮：Yes和No.第一个字符串显示在消息框的标题栏，第二个字符串显示在对话框，第三个参数是消息框的俩按钮，最后一个参数是默认按钮，这个按钮是默认选中的。返回值在变量reply里。</span></span><br><span class=\"line\"><span class=\"string\">        &#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> reply == QMessageBox.Yes:</span><br><span class=\"line\">            event.accept()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            event.ignore()     </span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        关闭QWidget，就会产生一个QCloseEvent，并且把它传入到closeEvent函数的event参数中。</span></span><br><span class=\"line\"><span class=\"string\">        改变控件的默认行为，就是替换掉默认的事件处理。</span></span><br><span class=\"line\"><span class=\"string\">        &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">               </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"窗口居中\"><a href=\"#窗口居中\" class=\"headerlink\" title=\"窗口居中\"></a>窗口居中</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">例6：窗口居中</span></span><br><span class=\"line\"><span class=\"string\">ZetCode PyQt5 tutorial </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This program centers a window </span></span><br><span class=\"line\"><span class=\"string\">on the screen. </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Author: Jan Bodnar</span></span><br><span class=\"line\"><span class=\"string\">Website: zetcode.com </span></span><br><span class=\"line\"><span class=\"string\">Last edited: August 2017</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> PyQt5.QtWidgets <span class=\"keyword\">import</span> QWidget, QDesktopWidget, QApplication</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Example</span>(<span class=\"params\">QWidget</span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initUI</span>(<span class=\"params\">self</span>):</span>               </span><br><span class=\"line\"></span><br><span class=\"line\">        self.resize(<span class=\"number\">250</span>, <span class=\"number\">150</span>)</span><br><span class=\"line\">        self.center()</span><br><span class=\"line\"></span><br><span class=\"line\">        self.setWindowTitle(<span class=\"string\">&#x27;Center&#x27;</span>)    </span><br><span class=\"line\">        self.show()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">center</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">        qr = self.frameGeometry()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#这一句获得主窗口所在的框架，其中QtGui.QDesktopWidget提供了用户的桌面信息，包括屏幕的大小。</span></span><br><span class=\"line\">        cp = QDesktopWidget().availableGeometry().center()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#获取显示器的分辨率，然后得到屏幕中间点的位置。</span></span><br><span class=\"line\">        qr.moveCenter(cp)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#通过move函数把主窗口的左上角移动到其框架的左上角，实现窗口居中</span></span><br><span class=\"line\">        self.move(qr.topLeft())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    app = QApplication(sys.argv)</span><br><span class=\"line\">    ex = Example()</span><br><span class=\"line\">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2>","text":"应用窗口初始化QApplication与QWidgetQWidget控件是一个用户界面的基本控件，它提供了基本的应用构造器。默认情况下，构造器是没有父级的，没有父级的构造器被称为窗口（window）。窗口类型简介^1<br>QMainWindow、QWidget、QDialog用","link":"","raw":null,"photos":[],"categories":[{"name":"Programming languages and projects","slug":"Programming-languages-and-projects","count":11,"path":"api/categories/Programming-languages-and-projects.json"},{"name":"Python3","slug":"Programming-languages-and-projects/Python3","count":9,"path":"api/categories/Programming-languages-and-projects/Python3.json"},{"name":"PYQT5","slug":"Programming-languages-and-projects/Python3/PYQT5","count":9,"path":"api/categories/Programming-languages-and-projects/Python3/PYQT5.json"}],"tags":[{"name":"python3","slug":"python3","count":9,"path":"api/tags/python3.json"},{"name":"gui","slug":"gui","count":9,"path":"api/tags/gui.json"}]},{"title":"Hello World","slug":"hello-world","date":"2021-08-29T14:29:42.425Z","updated":"2021-08-29T14:29:42.426Z","comments":true,"path":"api/articles/hello-world.json","excerpt":"","keywords":null,"cover":null,"content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the ","link":"","raw":null,"photos":[],"categories":[{"name":"Diary","slug":"Diary","count":1,"path":"api/categories/Diary.json"},{"name":"life","slug":"Diary/life","count":1,"path":"api/categories/Diary/life.json"}],"tags":[{"name":"llife","slug":"llife","count":1,"path":"api/tags/llife.json"}]},{"title":"Your first md","slug":"first","date":"2021-08-29T14:29:42.424Z","updated":"2021-08-29T14:29:42.424Z","comments":true,"path":"api/articles/first.json","excerpt":"","keywords":null,"cover":null,"content":"<p>light single page blog application theme, using <code>Vue</code>, <code>Vuex</code>, <code>ElementUI</code> and so on.</p>\n<p>第一个使用的主题是一款基于<code>Vue</code>, <code>Vuex</code> 和 <code>ElementUI</code> 构建的轻量单页博客主题</p>\n<h2 id=\"Live-Demo\"><a href=\"#Live-Demo\" class=\"headerlink\" title=\"Live Demo\"></a>Live Demo</h2><p><a href=\"https://heskeybaozi.github.io/\">Demo | 在线演示</a></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","text":"light single page blog application theme, using Vue, Vuex, ElementUI and so on.第一个使用的主题是一款基于Vue, Vuex 和 ElementUI 构建的轻量单页博客主题Live DemoDemo |","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"typora中的锚点与引用","slug":"Reference","date":"2021-08-29T14:29:42.424Z","updated":"2021-09-02T23:48:45.283Z","comments":true,"path":"api/articles/Reference.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"在markdown编辑器Typora中使用锚点与引用\"><a href=\"#在markdown编辑器Typora中使用锚点与引用\" class=\"headerlink\" title=\"在markdown编辑器Typora中使用锚点与引用\"></a>在markdown编辑器Typora中使用锚点与引用</h1><h2 id=\"点击链接，打开网页，跳转相关url\"><a href=\"#点击链接，打开网页，跳转相关url\" class=\"headerlink\" title=\"点击链接，打开网页，跳转相关url\"></a>点击链接，打开网页，跳转相关url</h2><p>在之前写博客的时候，一直被引用参考文献的问题所困扰，<a href=\"https://markdown.com.cn/basic-syntax/links.html\">Markdown官方语法教程相关页面</a>中给对于引用和链接跳转出了以下的方法，</p>\n<blockquote>\n<h3 id=\"引用类型链接\"><a href=\"#引用类型链接\" class=\"headerlink\" title=\"引用类型链接\"></a>引用类型链接</h3><p>引用样式链接是一种特殊的链接，它使URL在Markdown中更易于显示和阅读。参考样式链接分为两部分：与文本保持内联的部分以及存储在文件中其他位置的部分，以使文本易于阅读。</p>\n<h4 id=\"链接的第一部分格式\"><a href=\"#链接的第一部分格式\" class=\"headerlink\" title=\"# 链接的第一部分格式\"></a><a href=\"https://markdown.com.cn/basic-syntax/links.html#%E9%93%BE%E6%8E%A5%E7%9A%84%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%E6%A0%BC%E5%BC%8F\"># </a>链接的第一部分格式</h4><p>引用类型的链接的第一部分使用两组括号进行格式设置。第一组方括号包围应显示为链接的文本。第二组括号显示了一个标签，该标签用于指向您存储在文档其他位置的链接。</p>\n<p>尽管不是必需的，可以在第一组和第二组括号之间包含一个空格。第二组括号中的标签不区分大小写，可以包含字母，数字，空格或标点符号。</p>\n<p>以下示例格式对于链接的第一部分效果相同：</p>\n<ul>\n<li><code>[hobbit-hole][1]</code></li>\n<li><code>[hobbit-hole] [1]</code></li>\n</ul>\n<h4 id=\"链接的第二部分格式\"><a href=\"#链接的第二部分格式\" class=\"headerlink\" title=\"# 链接的第二部分格式\"></a><a href=\"https://markdown.com.cn/basic-syntax/links.html#%E9%93%BE%E6%8E%A5%E7%9A%84%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86%E6%A0%BC%E5%BC%8F\"># </a>链接的第二部分格式</h4><p>引用类型链接的第二部分使用以下属性设置格式：</p>\n<ol>\n<li>放在括号中的标签，其后紧跟一个冒号和至少一个空格（例如<code>[label]:</code>）。</li>\n<li>链接的URL，可以选择将其括在尖括号中。</li>\n<li>链接的可选标题，可以将其括在双引号，单引号或括号中。</li>\n</ol>\n<p>以下示例格式对于链接的第二部分效果相同：</p>\n<ul>\n<li><code>[1]: https://en.wikipedia.org/wiki/Hobbit#Lifestyle</code></li>\n<li><code>[1]: https://en.wikipedia.org/wiki/Hobbit#Lifestyle &quot;Hobbit lifestyles&quot;</code></li>\n<li><code>[1]: https://en.wikipedia.org/wiki/Hobbit#Lifestyle &#39;Hobbit lifestyles&#39;</code></li>\n<li><code>[1]: https://en.wikipedia.org/wiki/Hobbit#Lifestyle (Hobbit lifestyles)</code></li>\n<li><code>[1]: &lt;https://en.wikipedia.org/wiki/Hobbit#Lifestyle&gt; &quot;Hobbit lifestyles&quot;</code></li>\n<li><code>[1]: &lt;https://en.wikipedia.org/wiki/Hobbit#Lifestyle&gt; &#39;Hobbit lifestyles&#39;</code></li>\n<li><code>[1]: &lt;https://en.wikipedia.org/wiki/Hobbit#Lifestyle&gt; (Hobbit lifestyles)</code></li>\n</ul>\n<p>可以将链接的第二部分放在Markdown文档中的任何位置。有些人将它们放在出现的段落之后，有些人则将它们放在文档的末尾（例如尾注或脚注）。</p>\n</blockquote>\n<p><a href=\"https://www.baidu.com/\" title=\"百度\">此处被“ctrl+鼠标左键”点击后，调用浏览器跳转至百度首页</a></p>\n<p><a href=\"%22%E8%B0%B7%E6%AD%8C%22\">点击此处不能实现跳转</a></p>\n<p><strong>References</strong><br>注意参考文献reference是可数名词</p>\n<p>这种方式适合于带有链接的参考文献，如果想在点击链接后，跳转至markdown文件末尾的脚注中（再进一步决定是否跳转脚注指向的参考文献中的url链接），我们需要采用下面的办法。</p>\n<h3 id=\"实现页内跳转\"><a href=\"#实现页内跳转\" class=\"headerlink\" title=\"实现页内跳转\"></a>实现页内跳转</h3><p>页内跳转：从一篇文章的一个地方（锚点）跳到该篇文章的另一个地方（页内链接）</p>\n<p>一些网上资料中，介绍这样一种markdown文档中实现页面内部跳转的方式：</p>\n<blockquote>\n<p>先定义要跳转的锚点——这一部分放在我们的正文中</p>\n<p><code>&lt;span id=&quot;your_anchor&quot;&gt;在别处点击后，您要跳转到此锚点处&lt;/span&gt;</code></p>\n</blockquote>\n<blockquote>\n<p>然后是定义链接（点击后跳转到对应的锚点）——这一部分通常放在末尾作为参考文献<br><code>[锚点]（#your_anchor）</code></p>\n</blockquote>\n<p>但实际上，在markdown编辑器typora中，这个方式存在缺陷，具体原因为：需要使用<strong>a</strong>标签而不能为其他标签，诸如span，div等，比如下面的例子：</p>\n<p><a href=\"#anchor\">a标签中的文本，“ctrl+左键”可以跳转到锚点</a></p>\n<p><span style=\"color:green\"><a href=\"#anchor\" style=\"text-decoration:none\">在这一个链接中，a标签被嵌套于一个div标签中，也可以跳转到与上面链接一样关联的锚点。同时我们通过设置a标签的style属性来去除此链接的下划线</a></span></p>\n<p><span href=\"#anchoro\">这一个span标签中的链接就没办法跳转了</span></p>\n<p><a href=\"https://support.typora.io/Links/#html-a-tag\">Typora官方文档的此页面</a>中给出了a标签在这种情况下的使用方法：</p>\n<blockquote>\n<h4 id=\"HTML-lt-a-gt-tag\"><a href=\"#HTML-lt-a-gt-tag\" class=\"headerlink\" title=\"HTML &lt;a&gt; tag\"></a>HTML <code>&lt;a&gt;</code> tag</h4><p>You could also use raw HTML to add links, for example</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;http://www.google.com&quot; target=&quot;__blank&quot;&gt;Link to Google&lt;/a&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;a name=&quot;anchor&quot;&gt;&lt;/a&gt; Anchor</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;a href=&quot;#anchor&quot;&gt;Link to Anchor&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<p>For link towards a website, we suggest you <strong>DO NOT ommit URL protocols</strong> like <code>https://</code> or <code>http://</code>, or it may be interpreted as relative link by Typora or other Markdown egines, or after export/publish.</p>\n</blockquote>\n<p><a name=\"anchor\">这里是我们预先定义的锚点</a></p>\n<p>注意，以上这几种方式只能实现单向跳转。如果想要实现word编辑论文中，参考文献式的双向跳转，需要参照<a href=\"https://markdown.com.cn/extended-syntax/footnotes.html\">markdown官方教程中的脚注语法</a><a href=\"%5Bmarkdown%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B%E4%B8%AD%E7%9A%84%E8%84%9A%E6%B3%A8%E8%AF%AD%E6%B3%95%5D(https://markdown.com.cn/extended-syntax/footnotes.html)\">^1</a>：</p>\n<blockquote>\n<p>脚注使您可以添加注释和参考，而不会使文档正文混乱。当您创建脚注时，带有脚注的上标数字会出现在您添加脚注参考的位置。读者可以单击链接（在typora编辑器中为”ctrl+左键”）以跳至页面底部的脚注内容。</p>\n<p>要创建脚注参考，请在方括号（<code>[^1]</code>）内添加插入符号和标识符。标识符可以是数字或单词，但不能包含空格或制表符。标识符仅将脚注参考与脚注本身相关联-在输出中，脚注按顺序编号。</p>\n<p>在括号内使用另一个插入符号和数字添加脚注，并用冒号和文本（<code>[^1]: My footnote.</code>）。您不必在文档末尾添加脚注。您可以将它们放在除列表，块引号和表之类的其他元素之外的任何位置。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Here&#x27;s a simple footnote,[^1] and here&#x27;s a longer one.[^bignote]</span><br><span class=\"line\"></span><br><span class=\"line\">[^1]: This is the first footnote.</span><br><span class=\"line\"></span><br><span class=\"line\">[^bignote]: Here&#x27;s one with multiple paragraphs and code.</span><br><span class=\"line\"></span><br><span class=\"line\">    Indent paragraphs to include them in the footnote.</span><br><span class=\"line\"></span><br><span class=\"line\">    `&#123; my code &#125;`</span><br><span class=\"line\"></span><br><span class=\"line\">    Add as many paragraphs as you like.</span><br></pre></td></tr></table></figure>\n\n<p>呈现的输出如下所示：</p>\n<p>Here’s a simple footnote,<a href=\"%5Bmarkdown%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B%E4%B8%AD%E7%9A%84%E8%84%9A%E6%B3%A8%E8%AF%AD%E6%B3%95%5D(https://markdown.com.cn/extended-syntax/footnotes.html)\">^1</a> and here’s a longer one.[^bignote]</p>\n<p><a href=\"%5Bmarkdown%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B%E4%B8%AD%E7%9A%84%E8%84%9A%E6%B3%A8%E8%AF%AD%E6%B3%95%5D(https://markdown.com.cn/extended-syntax/footnotes.html)\">^1</a>: This is the first footnote.<br>[^bignote]: Here’s one with multiple paragraphs and code.</p>\n</blockquote>\n<p>注意，这里末尾的参考文献中，编号为1的脚注之所以有两个箭头指向链接，是因为我们在本篇博客中使用了两个同名为“1”的链接，我们可以从这里看出，脚注具有顺序性。</p>\n<p><strong>一个值得注意的点</strong></p>\n<p>编写作为锚点的位于末尾的参考文献时，如果要附上url链接，格式写作如下形式：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">^anchor</span>]: [<span class=\"string\">文章标题</span>](<span class=\"link\">url</span>) </span><br></pre></td></tr></table></figure>\n\n<p>其中，不仅第二个方括号和冒号之间要空一格，由于**[文本](url)**是markdown的一种链接语法，为了让参考文献也拥有向url跳转的箭头功能，需要在(url)后空一格，箭头才能显现，否则就无法实现双向的跳转。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2>","text":"在markdown编辑器Typora中使用锚点与引用点击链接，打开网页，跳转相关url在之前写博客的时候，一直被引用参考文献的问题所困扰，Markdown官方语法教程相关页面中给对于引用和链接跳转出了以下的方法，引用类型链接引用样式链接是一种特殊的链接，它使URL在Markdow","link":"","raw":null,"photos":[],"categories":[{"name":"MarkDown","slug":"MarkDown","count":1,"path":"api/categories/MarkDown.json"},{"name":"typora的特殊使用","slug":"MarkDown/typora的特殊使用","count":1,"path":"api/categories/MarkDown/typora的特殊使用.json"}],"tags":[{"name":"markdown","slug":"markdown","count":1,"path":"api/tags/markdown.json"},{"name":"typora","slug":"typora","count":1,"path":"api/tags/typora.json"}]},{"title":"PYQT5介绍","slug":"PYQT5介绍","date":"2021-08-29T14:29:42.423Z","updated":"2021-08-29T14:29:42.423Z","comments":true,"path":"api/articles/PYQT5介绍.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"PYQT5\"><a href=\"#PYQT5\" class=\"headerlink\" title=\"PYQT5\"></a>PYQT5</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>PyQt5 是Digia的一套Qt5应用框架与python的结合，同时支持2.x和3.x。<br>Qt库由Riverbank Computing开发，是最强大的GUI库之一 ，<br>官方网站：<a href=\"https://riverbankcomputing.com/\">https://riverbankcomputing.com/</a><br>PyQt5是由一系列Python模块组成。超过620个类，6000函数和方法。能在诸如Unix、Windows和Mac OS等主流操作系统上运行。PyQt5有两种证书，GPL和商业证书。</p>\n<h3 id=\"PYQT和QT\"><a href=\"#PYQT和QT\" class=\"headerlink\" title=\"PYQT和QT\"></a>PYQT和QT</h3><p>PyQt的介绍，以及其与Qt的不同，可见<a href=\"https://www.riverbankcomputing.com/static/Docs/PyQt5/introduction.html\">官网此页</a></p>\n<p>Qt是一组c++库和开发工具，包括图形用户界面，网络，线程，正则表达式，SQL数据库，SVG, OpenGL, XML，用户和应用程序设置，定位和定位服务，短程通信(NFC和蓝牙)，web浏览，3D动画，图表、3D数据可视化以及与应用商店的交互。PyQt5作为一组Python模块实现了超过1000个这样的类。</p>\n<p>PyQt5是一组来自Qt公司的用于Qt应用程序框架v5的Python绑定，由PyQt5本身和许多与Qt的附加库相对应的附加组件组成。每一个都提供了一个源代码发行版(sdist)和用于Windows、Linux和macOS的二进制轮。<br>PyQt5支持Windows、Linux、UNIX、Android、macOS和iOS平台，需要Python v3.5或更高版本。(PyQt5还应该使用遗留的configure.py构建脚本在Python v2.7和Python v3的早期版本上构建，但这是不支持的。)</p>\n<h2 id=\"PYQT的类别\"><a href=\"#PYQT的类别\" class=\"headerlink\" title=\"PYQT的类别\"></a>PYQT的类别</h2><p>Pyqt的类别分为以下几个模块：</p>\n<ul>\n<li>QtCore:包含了核心的非GUI功能。此模块用于处理时间、文件和目录、各种数据类型、流、URL、MIME类型、线程或进程。</li>\n<li>QtGui包含类窗口系统集成、事件处理、二维图形、基本成像、字体和文本。</li>\n<li>QtWidgets模块包含创造经典桌面风格的用户界面提供了一套UI元素的类。</li>\n<li>QtMultimedia包含的类来处理多媒体内容和API来访问相机和收音机的功能。</li>\n<li>Qtbluetooth模块包含类的扫描设备和连接并与他们互动。描述模块包含了网络编程的类。这些类便于TCP和IP和UDP客户端和服务器的编码，使网络编程更容易和更便携。</li>\n<li>Qtpositioning包含类的利用各种可能的来源，确定位置，包括卫星、Wi-Fi、或一个文本文件。</li>\n<li>Enginio模块实现了客户端库访问Qt云服务托管的应用程序运行时。</li>\n<li>Qtwebsockets模块包含实现WebSocket协议类。</li>\n<li>QtWebKit包含一个基于Webkit2图书馆Web浏览器实现类。</li>\n<li>QtWebkitwidgets包含的类的基础webkit1一用于qtwidgets应用Web浏览器的实现。</li>\n<li>QtXml包含与XML文件的类。这个模块为SAX和DOM API提供了实现。</li>\n<li>QtSvg模块提供了显示SVG文件内容的类。可伸缩矢量图形（SVG）是一种描述二维图形和图形应用的语言。</li>\n<li>QtSql模块提供操作数据库的类。</li>\n<li>QtTest包含的功能，使pyqt5应用程序的单元测试</li>\n</ul>\n<h2 id=\"Pyqt5与Pyside2\"><a href=\"#Pyqt5与Pyside2\" class=\"headerlink\" title=\"Pyqt5与Pyside2\"></a>Pyqt5与Pyside2</h2><p>这里有一篇英文<a href=\"https://www.pythonguis.com/faq/pyqt5-vs-pyside2/\">文章</a>讲述了这两个package之间的区别。简单地说，Pyqt的使用历史比较长，目前中文方面的资料也比较多，Pyside是后续由原先参与Pyqt项目的公司推出的，二者在使用协议方面由不同。<br>在文档方面，Pyqt5与Pyside2大部分函数的构造都相同，详情可见以下网址：<br><a href=\"https://www.riverbankcomputing.com/static/Docs/PyQt5/index.html#\">PyQt5官方文档</a><br><a href=\"https://doc.qt.io/qtforpython-5/\">Pyside2官方文档</a></p>\n<h2 id=\"安装与配置\"><a href=\"#安装与配置\" class=\"headerlink\" title=\"安装与配置\"></a>安装与配置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pyqt5</span><br><span class=\"line\"><span class=\"comment\">#使用pip下载该package</span></span><br><span class=\"line\"></span><br><span class=\"line\">pip install pyqt5-tools</span><br><span class=\"line\"><span class=\"comment\">#由于Qt Designer已经在Python3.5版本从PyQt5转移到了tools，因此我们还需要安装pyqt5-tools</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"验证是否成功安装\"><a href=\"#验证是否成功安装\" class=\"headerlink\" title=\"验证是否成功安装\"></a>验证是否成功安装</h2><p>qt designer是PyQt程序UI界面的实现工具，使用Qt Designer可以拖拽、点击完成GUI界面设计，并且设计完成的.ui程序可以转换成.py文件供python程序调用。Qt Designer的设计符合MVC的架构，其实现了视图和逻辑的分离，从而实现了开发的便捷。Qt Designer中的操作方式十分灵活，其通过拖拽的方式放置控件可以随时查看控件效果。Qt Designer生成的.ui文件（实质上是XML格式的文件）也可以通过<code>pyuic5</code>工具转换成.py文件。</p>\n<p>同时按下<code>win</code>+<code>s</code>键，在<code>cornata</code> 中输入<code>designer</code>，可以定位到<code>qt designer</code>程序的地址，成功启动该程序，则说明<code>PyQt5</code>已经被安装。</p>\n<p>另一种方法：在控制台中输入<code>pyuic5</code>，若返回信息为：<code>Error: one input ui-file must be specified</code>，说明 <code>PyQt5</code>已经被成功安装。</p>\n","text":"PYQT5介绍PyQt5 是Digia的一套Qt5应用框架与python的结合，同时支持2.x和3.x。<br>Qt库由Riverbank Computing开发，是最强大的GUI库之一 ，<br>官方网站：https://riverbankcomputing.com/<br>P","link":"","raw":null,"photos":[],"categories":[{"name":"Programming languages and projects","slug":"Programming-languages-and-projects","count":11,"path":"api/categories/Programming-languages-and-projects.json"},{"name":"Python3","slug":"Programming-languages-and-projects/Python3","count":9,"path":"api/categories/Programming-languages-and-projects/Python3.json"},{"name":"PYQT5","slug":"Programming-languages-and-projects/Python3/PYQT5","count":9,"path":"api/categories/Programming-languages-and-projects/Python3/PYQT5.json"}],"tags":[{"name":"python3","slug":"python3","count":9,"path":"api/tags/python3.json"},{"name":"gui","slug":"gui","count":9,"path":"api/tags/gui.json"}]}]}