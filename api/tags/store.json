{"name":"store","slug":"store","count":1,"postlist":[{"title":"几个常用的vue名词详解","slug":"几个常用的vue名词详解","date":"2021-09-19T02:25:01.014Z","updated":"2021-09-19T12:19:51.412Z","comments":true,"path":"api/articles/几个常用的vue名词详解.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"几个常用的vue名词详解\"><a href=\"#几个常用的vue名词详解\" class=\"headerlink\" title=\"几个常用的vue名词详解\"></a>几个常用的vue名词详解</h1><h2 id=\"vue是什么？\"><a href=\"#vue是什么？\" class=\"headerlink\" title=\"vue是什么？\"></a>vue是什么？</h2><p>没有比<a href=\"https://v3.cn.vuejs.org/guide/introduction.html#vue-js-%E6%98%AF%E4%BB%80%E4%B9%88\">官网</a>更好的解释了：</p>\n<blockquote>\n<p>Vue (读音 /vjuː/，类似于 <strong>view</strong>) 是一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与<a href=\"https://cn.vuejs.org/v2/guide/single-file-components.html\">现代化的工具链</a>以及各种<a href=\"https://github.com/vuejs/awesome-vue#libraries--plugins\">支持类库</a>结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p>\n</blockquote>\n<p>官方文档中还提供提供了<a href=\"https://cn.vuejs.org/v2/guide/comparison.html\">vue2与其他几个常见框架的对比</a>。</p>\n<p>相比传统的<code>html</code>、<code>css</code>、<code>javascript</code>使用<code>vue</code>的优势在于我们不必手动操作DOM，而是可以直接将js变量放到html页面当中，数据会自动绑定。开发者只需将重点放到对数据的处理上即可，代码也更加精简。当页面元素很多的时候，使用vue组件（如<code>v-for</code>列表渲染），可以让我们不必再一味复制粘贴html标签。</p>\n<p>但是，以上操作只是将html和js组合在一起，并解决了html的复用问题，但css样式依然需要复制粘贴。为了解决这个问题，我们要使用单文件的vue组件，将html，css，javascript代码放到同一个.vue文件中。然后，使用webpack这一构建工具将代码进行分离，并分别与其他同类型的代码打包到一起。在基础阶段不必熟知webpack的具体原理，只需会用即可。</p>\n<p><strong>使用webpack打包有以下几个好处</strong>：</p>\n<ol>\n<li>将许多碎小文件打包成一个整体，减少单页面内的衍生请求次数，提高网站效率。</li>\n<li>将ES6的高级语法进行转换编译，以兼容老版本的浏览器。</li>\n<li>将代码打包的同时进行混淆，提高代码的安全性。</li>\n</ol>\n<h2 id=\"webpack模板\"><a href=\"#webpack模板\" class=\"headerlink\" title=\"webpack模板\"></a>webpack模板</h2><p><a href=\"https://www.webpackjs.com/concepts/\">webpack官方文档</a>对此有解释：</p>\n<blockquote>\n<p>本质上，<em>webpack</em> 是一个现代 JavaScript 应用程序的*静态模块打包器(module bundler)<em>。当 webpack 处理应用程序时，它会递归地构建一个</em>依赖关系图(dependency graph)*，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 <em>bundle</em>。</p>\n</blockquote>\n<p><a href=\"https://www.jianshu.com/p/a2c6ec809b28\">这篇简书文章</a>中也有提到：</p>\n<blockquote>\n<p>Webpack是一个模块化打包工具，专注于构建模块化项目，在Webpack眼里一切文件都是模块，通过Loader转换翻译文件，通过Plugin注入钩子，最后输出由多个模块组合成的文件。</p>\n<p>之所以一切文件皆模块，如：JavaScript、CSS、SCSS以及图片等资源，在Webpack眼中都是模块，因为这样可以更好的理清描述各个模块之间的依赖关系，方便Webpack对模块进行打包组合，输出浏览器使用的静态资源。</p>\n</blockquote>\n<p>目前，大部分的教程和大型项目都推荐使用webpack对vue进行打包。</p>\n<h2 id=\"为什么要使用vue-cli\"><a href=\"#为什么要使用vue-cli\" class=\"headerlink\" title=\"为什么要使用vue-cli?\"></a>为什么要使用vue-cli?</h2><p>Vue 提供了一个官方的 CLI，为单页面应用 (SPA) 快速搭建繁杂的脚手架。它为现代前端工作流提供了开箱即用的构建设置。只需要几分钟的时间就可以运行起来并带有热重载、保存时 lint 校验，以及生产环境可用的构建版本。更多详情可查阅 <a href=\"https://cli.vuejs.org/zh/guide/\">vue cli官方文档</a>对vue-cli的定义：</p>\n<blockquote>\n<p>Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统，提供：</p>\n<ul>\n<li><p>通过 <code>@vue/cli</code> 实现的交互式的项目脚手架。</p>\n</li>\n<li><p>通过 <code>@vue/cli</code> + <code>@vue/cli-service-global</code> 实现的零配置原型开发。</p>\n</li>\n<li><p>一个运行时依赖 (</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@vue/cli-service</span><br></pre></td></tr></table></figure>\n\n<p>)，该依赖：</p>\n<ul>\n<li>可升级；</li>\n<li>基于 webpack 构建，并带有合理的默认配置；</li>\n<li>可以通过项目内的配置文件进行配置；</li>\n<li>可以通过插件进行扩展。</li>\n</ul>\n</li>\n<li><p>一个丰富的官方插件集合，集成了前端生态中最好的工具。</p>\n</li>\n<li><p>一套完全图形化的创建和管理 Vue.js 项目的用户界面。</p>\n</li>\n</ul>\n<p>Vue CLI 致力于将 Vue 生态中的工具基础标准化。它确保了各种构建工具能够基于智能的默认配置即可平稳衔接，这样你可以专注在撰写应用上，而不必花好几天去纠结配置的问题。与此同时，它也为每个工具提供了调整配置的灵活性，无需 eject。</p>\n</blockquote>\n<p>这篇<a href=\"https://juejin.cn/post/6844903954346688520\">掘金文章</a>中，讲到了使用命令<code>vue init webpack myproject</code>来创建项目时候的信息填写与选择：</p>\n<ul>\n<li><p>Project name (baoge)： —–项目名称，直接回车，按照括号中默认名字（<strong>注意这里的名字不能有大写字母</strong>，否则会报错：<code>Sorry, name can no longer contain capital letters</code>）</p>\n</li>\n<li><p>Project description (A Vue.js project)： —-项目描述，也可直接点击回车，使用默认名字</p>\n</li>\n<li><p>Author ()： —-作者</p>\n</li>\n</ul>\n<p><strong>接下来是用户可以进行选择的项</strong>：</p>\n<ul>\n<li><p>Runtime + Compiler: recommended for most users 运行加编译，既然已经说了推荐，就选它了<br>Runtime-only: about 6KB lighter min+gzip, but templates (or any Vue-specificHTML) are ONLY allowed in .vue files - render functions are required elsewhere 仅运行时，已经有推荐了就选择第一个了</p>\n</li>\n<li><p>Install vue-router? (Y/n) 是否安装vue-router，这是官方的路由，大多数情况下都使用，这里就输入“y”后回车即可。</p>\n</li>\n<li><p>Use ESLint to lint your code? (Y/n) 是否使用ESLint管理代码，ESLint是个代码风格管理工具，是用来统一代码风格的，一般项目中都会使用。<br>接下来也是选择题Pick an ESLint preset (Use arrow keys) 选择一个ESLint预设，编写vue项目时的代码风格，直接y回车</p>\n</li>\n<li><p>Setup unit tests with Karma + Mocha? (Y/n) 是否安装单元测试，选择安装y回车</p>\n</li>\n<li><p>Setup e2e tests with Nightwatch(Y/n)? 是否安装e2e测试 ，选择安装y回车</p>\n</li>\n</ul>\n<h2 id=\"不使用vue-cli的情况下搭建vue项目\"><a href=\"#不使用vue-cli的情况下搭建vue项目\" class=\"headerlink\" title=\"不使用vue-cli的情况下搭建vue项目\"></a>不使用vue-cli的情况下搭建vue项目</h2><p>首先，我们在DOS窗口中使用<code>npm init</code>来初始化一个项目。</p>\n<blockquote>\n<p>在node开发中使用npm  init会生成一个pakeage.json文件，这个文件主要是用来记录这个项目的详细信息的，它会将我们在项目开发中所要用到的包，以及项目的详细信息等记录在这个项目中。方便在以后的版本迭代和项目移植的时候会更加的方便。也是防止在后期的项目维护中误删除了一个包导致的项目不能够正常运行。使用npm init初始化项目还有一个好处就是在进行项目传递的时候不需要将项目依赖包一起发送给对方，对方在接受到你的项目之后再执行npm  install就可以将项目依赖全部下载到项目里。话不多说我们就直接开始进行操作。</p>\n</blockquote>\n<p>执行该命令后，DOS窗口中询问选项的含义如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package name:                    你的项目名字叫啥</span><br><span class=\"line\">version:                         版本号</span><br><span class=\"line\">description:                     对项目的描述</span><br><span class=\"line\">entry point:                     项目的入口文件（一般你要用那个js文件作为node服务，就填写那个文件，旧的版本默认为app.js，在14.15.5版本的node中默认为index.js）</span><br><span class=\"line\">test command:                    项目启动的时候要用什么命令来执行脚本文件</span><br><span class=\"line\">git repository:                  如果你要将项目上传到git中的话，那么就需要填写git的仓库地址</span><br><span class=\"line\">keywords：                       项目关键字</span><br><span class=\"line\">author:                         作者的名字</span><br><span class=\"line\">license:                        发行项目需要的证书，默认为ISC</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.npmjs.cn/files/package.json/\">npmjs的官方网站</a>上有对这几个名词的解释，中文方面的翻译欠缺。</p>\n<p>对于任何项目，<strong>Entry point</strong>是执行开始的文件。它取决于正在使用的技术的项目配置和运行时环境。</p>\n<p>示例：对于node.js项目，使用<strong>app.js</strong>初始化应用程序并将所有内容粘合在一起。</p>\n<p>在我们生成的package.json中，也有一个名为<code>main</code>的属性，官方解释：</p>\n<blockquote>\n<p> The main field is a module ID that is the primary entry point to your program.</p>\n</blockquote>\n<p>对于属性<code>keywords</code>的解释：</p>\n<blockquote>\n<p>Put keywords in it.  It’s an array of strings.  This helps people discover your package as it’s listed in <code>npm search</code>.</p>\n</blockquote>\n<p>想省事的话，可以使用命令<code>npm init -y</code>来代替，该命令会采用所有默认的配置。</p>\n<p>项目会生成一个<code>package.json</code>文件，代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;vue_test&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;version&quot;</span>: <span class=\"string\">&quot;1.0.0&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;description&quot;</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;main&quot;</span>: <span class=\"string\">&quot;index.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;keywords&quot;</span>: [],</span><br><span class=\"line\">  <span class=\"string\">&quot;author&quot;</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;license&quot;</span>: <span class=\"string\">&quot;ISC&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n","text":"几个常用的vue名词详解vue是什么？没有比官网更好的解释了：Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目","link":"","raw":null,"photos":[],"categories":[{"name":"Programming languages and projects","slug":"Programming-languages-and-projects","count":15,"path":"api/categories/Programming-languages-and-projects.json"},{"name":"JavaScript","slug":"Programming-languages-and-projects/JavaScript","count":6,"path":"api/categories/Programming-languages-and-projects/JavaScript.json"},{"name":"Vue","slug":"Programming-languages-and-projects/JavaScript/Vue","count":2,"path":"api/categories/Programming-languages-and-projects/JavaScript/Vue.json"}],"tags":[{"name":"vue","slug":"vue","count":2,"path":"api/tags/vue.json"},{"name":"vue-cli","slug":"vue-cli","count":2,"path":"api/tags/vue-cli.json"},{"name":"webpack","slug":"webpack","count":1,"path":"api/tags/webpack.json"},{"name":"store","slug":"store","count":1,"path":"api/tags/store.json"},{"name":"router","slug":"router","count":1,"path":"api/tags/router.json"}]}]}